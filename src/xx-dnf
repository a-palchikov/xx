#!/usr/bin/env sh

set -e

if [ -z "$XX_DNF_NOLOCK" ]; then
  mkdir -p /var/lock
  lock="/var/lock/xx-dnf"
  exec 9>$lock
  flock -x 9
  export XX_DNF_NOLOCK=1
fi

if [ -n "$XX_DEBUG_DNF" ]; then
  set -x
fi

unset XX_VENDOR # vendor for installing packages is always fedora

for l in $(xx-info env); do
  export "${l?}"
done

if [ "${TARGETOS}" != "linux" ]; then
  echo >&2 "skipping packages installation on ${XX_OS}"
  exit 0
fi

arg0="$(basename "$0")"
if [ "$arg0" = "xx-dnf" ]; then
  arg0="dnf"
else
  arg0="yum"
fi

suffix=$XX_TRIPLE
if [ "$suffix" = "x86_64-linux-gnu" ]; then
  suffix="x86-64-linux-gnu"
fi
if [ "$XX_OS" = "windows" ]; then
  case "$XX_ARCH" in
    amd64) suffix="mingw-w64-x86-64" ;;
    386) suffix="mingw-w64-i686" ;;
    arm64) suffix="mingw-w64-aarch64" ;;
    arm) suffix="mingw-w64-arm" ;;
  esac
fi

packages2=
for p in ${packages}; do
  if [ "${p}" = "xx-c-essentials" ]; then
    p="glibc-devel"
    p="$p libgcc"
  elif [ "${p}" = "xx-cxx-essentials" ]; then
    p="libstdc++-devel"
  fi
  if [ -z "$packages2" ]; then
    packages2="$p"
  else
    packages2="${packages2} $p"
  fi
done

empty=1
for p in ${packages2}; do
  n=
  if [ -n "$nocross" ]; then
    n=${p}
  elif checkpkg "${p}-${suffix}" >/dev/null 2>/dev/null; then
    n="${p}-${suffix}"
  elif [ "${XX_OS}" = "linux" ] && [ -n "${XX_DNF_PREFER_CROSS}" ] && checkpkg "${p}.${XX_PKG_ARCH}-cross" >/dev/null 2>/dev/null; then
    n="${p}-${XX_PKG_ARCH}-cross"
  elif [ "${XX_OS}" = "linux" ]; then
    n="${p}.${XX_PKG_ARCH}"
  else
    continue
  fi
  empty=
  set -- "$@" "$n"
done

# qemu-invoker is a simple tool that wraps the qemu-user-static
# for the target architecture to execute specific binaries during
# xx-dnf install. This is necessary as many fedora packages are using
# scriptlets which call into bash.
# In order to enable this (and bash seems to be enough), we run bash
# under qemu emulation.
setup_qemu_invoker() {
  # this assumes bash has already been installed with `xx-dnf install bash`
  cp /usr/bin/qemu-$(xx-info rhel-arch)-static /"${XX_TRIPLE}"/usr/bin/
  mv /"${XX_TRIPLE}"/usr/bin/sh /"${XX_TRIPLE}"/usr/bin/sh-orig
  cp /usr/bin/qemu-invoker /"${XX_TRIPLE}"/usr/bin/sh
}

setup() {
  if ! xx-info is-cross; then
    return
  fi
  done_file="/${XX_TRIPLE}/.xx-setup"
  if [ -f "$done_file" ]; then
    return
  fi
  yum_dir="/${XX_TRIPLE}/etc/yum.repos.d"
  mkdir -p "$yum_dir"

  cp -r /etc/yum.repos.d/* "$yum_dir/"

  . /etc/os-release
  dnf install --assumeyes --forcearch "$(xx-info rhel-arch)" --installroot "/${XX_TRIPLE}" --releasever "${VERSION_ID}" fedora-repos

  touch "$done_file"
}

clean() {
  if ! xx-info is-cross; then
    return
  fi
  # safety first
  if [ -z "${XX_TRIPLE}" ]; then
    echo >&2 "invalid triple root $XX_TRIPLE"
    exit 1
  fi
  rm -rf "/${XX_TRIPLE:?}"
}

cmd() {
  setup
  root="/"
  if xx-info is-cross; then
    root="/${XX_TRIPLE}"
  fi
  n=$#
  iscompilerrt=
  isrustlib=
  for a in "$@"; do
    if [ $# = $n ]; then set --; fi
    case "$a" in
      "xx-c-essentials")
        set -- "$@" glibc-devel gcc
        ;;
      "xx-cxx-essentials")
        set -- "$@" g++
        ;;
      "compiler-rt" | "compiler-rt-static")
        iscompilerrt="$a"
        set -- "$@" "$a"
        ;;
      "rust-stdlib")
        set -- "$@" rust-std-static
        isrustlib=1
        ;;
      *)
        set -- "$@" "$a"
        ;;
    esac
  done
  if [ "$#" != "0" ]; then
    set -- "--installroot" "$root" "--forcearch" "$(xx-info rhel-arch)" "$@"
    echo "+ dnf " "$@"
  fi
  dnf "$@"
  if xx-info is-cross; then
    if [ -z "$XX_DNF_KEEP_BINARIES" ]; then
      rm -rf "/${XX_TRIPLE:?}/usr/bin/*"
    fi
    if [ -n "$iscompilerrt" ]; then
      for f in $(dnf --installroot "$root" info -qL "$iscompilerrt" | grep 'clang_rt.'); do
        ff="/${f}"
        if [ ! -f "${ff}" ]; then
          mkdir -p "$(dirname "${ff}")"
          ln -s "/$(xx-info)/${f}" "${ff}"
        fi
      done
    fi
    # rust stdlib is accessed from the real root
    if [ -n "$isrustlib" ] && [ -d "$root/usr/lib/rustlib/$(xx-info)" ]; then
      ln -s "$root/usr/lib/rustlib/$(xx-info)" "/usr/lib/rustlib/$(xx-info)" || true
    fi
  fi
}

case "$1" in
  "setup")
    setup
    ;;
  "setup_qemu_invoker")
    setup_qemu_invoker
    ;;
  "clean")
    clean
    ;;
  *)
    cmd "$@"
    ;;
esac
